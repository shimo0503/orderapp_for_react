/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * instant order backend API
 * this is API design
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiCustomer200,
  GetApiSales200,
  PostApiPayBody,
  RegisterSchema
} from '.././model';

import { customInstance } from '../../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Pay for a table
 */
export const postApiPay = (
    postApiPayBody: PostApiPayBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('table_number', postApiPayBody.table_number.toString())

      return customInstance<RegisterSchema>(
      {url: `/api/pay`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getPostApiPayMutationOptions = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPay>>, TError,{data: PostApiPayBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPay>>, TError,{data: PostApiPayBody}, TContext> => {
    
const mutationKey = ['postApiPay'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPay>>, {data: PostApiPayBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiPay(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPayMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPay>>>
    export type PostApiPayMutationBody = PostApiPayBody
    export type PostApiPayMutationError = RegisterSchema

    /**
 * @summary Pay for a table
 */
export const usePostApiPay = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPay>>, TError,{data: PostApiPayBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiPay>>,
        TError,
        {data: PostApiPayBody},
        TContext
      > => {

      const mutationOptions = getPostApiPayMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Get all customers
 */
export const getApiCustomer = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiCustomer200>(
      {url: `/api/customer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiCustomerQueryKey = () => {
    return [`/api/customer`] as const;
    }

    
export const getGetApiCustomerQueryOptions = <TData = Awaited<ReturnType<typeof getApiCustomer>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCustomerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCustomer>>> = ({ signal }) => getApiCustomer(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiCustomerQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCustomer>>>
export type GetApiCustomerQueryError = unknown


export function useGetApiCustomer<TData = Awaited<ReturnType<typeof getApiCustomer>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCustomer>>,
          TError,
          Awaited<ReturnType<typeof getApiCustomer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCustomer<TData = Awaited<ReturnType<typeof getApiCustomer>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiCustomer>>,
          TError,
          Awaited<ReturnType<typeof getApiCustomer>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiCustomer<TData = Awaited<ReturnType<typeof getApiCustomer>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all customers
 */

export function useGetApiCustomer<TData = Awaited<ReturnType<typeof getApiCustomer>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiCustomerQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * „Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò„Åï„Çå„Å¶„ÅÑ„ÇãÂ£≤‰∏äÊÉÖÂ†±„Çí„Åô„Åπ„Å¶ÂèñÂæó„Åó„Åæ„Åô„ÄÇ
 * @summary Â£≤‰∏ä„Éá„Éº„Çø„ÇíÂèñÂæó
 */
export const getApiSales = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiSales200>(
      {url: `/api/sales`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiSalesQueryKey = () => {
    return [`/api/sales`] as const;
    }

    
export const getGetApiSalesQueryOptions = <TData = Awaited<ReturnType<typeof getApiSales>>, TError = void>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiSales>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiSalesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiSales>>> = ({ signal }) => getApiSales(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiSales>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiSalesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiSales>>>
export type GetApiSalesQueryError = void


export function useGetApiSales<TData = Awaited<ReturnType<typeof getApiSales>>, TError = void>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiSales>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSales>>,
          TError,
          Awaited<ReturnType<typeof getApiSales>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiSales<TData = Awaited<ReturnType<typeof getApiSales>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiSales>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiSales>>,
          TError,
          Awaited<ReturnType<typeof getApiSales>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiSales<TData = Awaited<ReturnType<typeof getApiSales>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiSales>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Â£≤‰∏ä„Éá„Éº„Çø„ÇíÂèñÂæó
 */

export function useGetApiSales<TData = Awaited<ReturnType<typeof getApiSales>>, TError = void>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiSales>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiSalesQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



