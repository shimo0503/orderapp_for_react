/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * instant order backend API
 * this is API design
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  PostApiPayBody
} from '.././model';





/**
 * @summary Pay for a table
 */
export const postApiPay = (
    postApiPayBody: PostApiPayBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append('table_number', postApiPayBody.table_number.toString())

    return axios.post(
      `/api/pay`,
      formData,options
    );
  }



export const getPostApiPayMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPay>>, TError,{data: PostApiPayBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiPay>>, TError,{data: PostApiPayBody}, TContext> => {
    
const mutationKey = ['postApiPay'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiPay>>, {data: PostApiPayBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiPay(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPayMutationResult = NonNullable<Awaited<ReturnType<typeof postApiPay>>>
    export type PostApiPayMutationBody = PostApiPayBody
    export type PostApiPayMutationError = AxiosError<unknown>

    /**
 * @summary Pay for a table
 */
export const usePostApiPay = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiPay>>, TError,{data: PostApiPayBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiPay>>,
        TError,
        {data: PostApiPayBody},
        TContext
      > => {

      const mutationOptions = getPostApiPayMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Get all customers
 */
export const getApiCustomer = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.get(
      `/api/customer`,options
    );
  }


export const getGetApiCustomerQueryKey = () => {
    return [`/api/customer`] as const;
    }

    
export const getGetApiCustomerQueryOptions = <TData = Awaited<ReturnType<typeof getApiCustomer>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiCustomerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiCustomer>>> = ({ signal }) => getApiCustomer({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiCustomerQueryResult = NonNullable<Awaited<ReturnType<typeof getApiCustomer>>>
export type GetApiCustomerQueryError = AxiosError<unknown>


/**
 * @summary Get all customers
 */

export function useGetApiCustomer<TData = Awaited<ReturnType<typeof getApiCustomer>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiCustomer>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiCustomerQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



