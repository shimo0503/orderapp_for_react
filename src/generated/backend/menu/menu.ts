/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * instant order backend API
 * this is API design
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  PostApiMenuNewBody,
  PostApiOrderAddBody,
  RegisterSchema
} from '.././model';

import { customInstance } from '../../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Create a new menu item
 */
export const postApiMenuNew = (
    postApiMenuNewBody: PostApiMenuNewBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiMenuNewBody.name !== undefined) {
 formData.append('name', postApiMenuNewBody.name)
 }
if(postApiMenuNewBody.code !== undefined) {
 formData.append('code', postApiMenuNewBody.code)
 }
if(postApiMenuNewBody.price !== undefined) {
 formData.append('price', postApiMenuNewBody.price.toString())
 }
if(postApiMenuNewBody.rest !== undefined) {
 formData.append('rest', postApiMenuNewBody.rest.toString())
 }

      return customInstance<RegisterSchema>(
      {url: `/api/Menu/new`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getPostApiMenuNewMutationOptions = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMenuNew>>, TError,{data: PostApiMenuNewBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiMenuNew>>, TError,{data: PostApiMenuNewBody}, TContext> => {
    
const mutationKey = ['postApiMenuNew'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiMenuNew>>, {data: PostApiMenuNewBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiMenuNew(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiMenuNewMutationResult = NonNullable<Awaited<ReturnType<typeof postApiMenuNew>>>
    export type PostApiMenuNewMutationBody = PostApiMenuNewBody
    export type PostApiMenuNewMutationError = RegisterSchema

    /**
 * @summary Create a new menu item
 */
export const usePostApiMenuNew = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMenuNew>>, TError,{data: PostApiMenuNewBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiMenuNew>>,
        TError,
        {data: PostApiMenuNewBody},
        TContext
      > => {

      const mutationOptions = getPostApiMenuNewMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Create new order (raw input, unclear format)
 */
export const postApiOrderNew = (
    postApiOrderNewBody: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RegisterSchema>(
      {url: `/api/order/new`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiOrderNewBody, signal
    },
      options);
    }
  


export const getPostApiOrderNewMutationOptions = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderNew>>, TError,{data: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderNew>>, TError,{data: string}, TContext> => {
    
const mutationKey = ['postApiOrderNew'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderNew>>, {data: string}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderNew(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderNewMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderNew>>>
    export type PostApiOrderNewMutationBody = string
    export type PostApiOrderNewMutationError = RegisterSchema

    /**
 * @summary Create new order (raw input, unclear format)
 */
export const usePostApiOrderNew = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderNew>>, TError,{data: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrderNew>>,
        TError,
        {data: string},
        TContext
      > => {

      const mutationOptions = getPostApiOrderNewMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Add detailed order
 */
export const postApiOrderAdd = (
    postApiOrderAddBody: PostApiOrderAddBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RegisterSchema>(
      {url: `/api/order/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postApiOrderAddBody, signal
    },
      options);
    }
  


export const getPostApiOrderAddMutationOptions = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAdd>>, TError,{data: PostApiOrderAddBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAdd>>, TError,{data: PostApiOrderAddBody}, TContext> => {
    
const mutationKey = ['postApiOrderAdd'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderAdd>>, {data: PostApiOrderAddBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderAdd(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderAddMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderAdd>>>
    export type PostApiOrderAddMutationBody = PostApiOrderAddBody
    export type PostApiOrderAddMutationError = RegisterSchema

    /**
 * @summary Add detailed order
 */
export const usePostApiOrderAdd = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAdd>>, TError,{data: PostApiOrderAddBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrderAdd>>,
        TError,
        {data: PostApiOrderAddBody},
        TContext
      > => {

      const mutationOptions = getPostApiOrderAddMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    