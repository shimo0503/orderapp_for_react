/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * instant order backend API
 * this is API design
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  PostApiMenuNewBody,
  PostApiOrderAddBody
} from '.././model';





/**
 * @summary Create a new menu item
 */
export const postApiMenuNew = (
    postApiMenuNewBody: PostApiMenuNewBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(postApiMenuNewBody.name !== undefined) {
 formData.append('name', postApiMenuNewBody.name)
 }
if(postApiMenuNewBody.code !== undefined) {
 formData.append('code', postApiMenuNewBody.code)
 }
if(postApiMenuNewBody.price !== undefined) {
 formData.append('price', postApiMenuNewBody.price.toString())
 }
if(postApiMenuNewBody.rest !== undefined) {
 formData.append('rest', postApiMenuNewBody.rest.toString())
 }

    return axios.post(
      `/api/Menu/new`,
      formData,options
    );
  }



export const getPostApiMenuNewMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMenuNew>>, TError,{data: PostApiMenuNewBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiMenuNew>>, TError,{data: PostApiMenuNewBody}, TContext> => {
    
const mutationKey = ['postApiMenuNew'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiMenuNew>>, {data: PostApiMenuNewBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiMenuNew(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiMenuNewMutationResult = NonNullable<Awaited<ReturnType<typeof postApiMenuNew>>>
    export type PostApiMenuNewMutationBody = PostApiMenuNewBody
    export type PostApiMenuNewMutationError = AxiosError<unknown>

    /**
 * @summary Create a new menu item
 */
export const usePostApiMenuNew = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiMenuNew>>, TError,{data: PostApiMenuNewBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiMenuNew>>,
        TError,
        {data: PostApiMenuNewBody},
        TContext
      > => {

      const mutationOptions = getPostApiMenuNewMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Create new order (raw input, unclear format)
 */
export const postApiOrderNew = (
    postApiOrderNewBody: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/api/order/new`,
      postApiOrderNewBody,options
    );
  }



export const getPostApiOrderNewMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderNew>>, TError,{data: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderNew>>, TError,{data: string}, TContext> => {
    
const mutationKey = ['postApiOrderNew'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderNew>>, {data: string}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderNew(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderNewMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderNew>>>
    export type PostApiOrderNewMutationBody = string
    export type PostApiOrderNewMutationError = AxiosError<unknown>

    /**
 * @summary Create new order (raw input, unclear format)
 */
export const usePostApiOrderNew = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderNew>>, TError,{data: string}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrderNew>>,
        TError,
        {data: string},
        TContext
      > => {

      const mutationOptions = getPostApiOrderNewMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Add detailed order
 */
export const postApiOrderAdd = (
    postApiOrderAddBody: PostApiOrderAddBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    
    return axios.post(
      `/api/order/add`,
      postApiOrderAddBody,options
    );
  }



export const getPostApiOrderAddMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAdd>>, TError,{data: PostApiOrderAddBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAdd>>, TError,{data: PostApiOrderAddBody}, TContext> => {
    
const mutationKey = ['postApiOrderAdd'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiOrderAdd>>, {data: PostApiOrderAddBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiOrderAdd(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiOrderAddMutationResult = NonNullable<Awaited<ReturnType<typeof postApiOrderAdd>>>
    export type PostApiOrderAddMutationBody = PostApiOrderAddBody
    export type PostApiOrderAddMutationError = AxiosError<unknown>

    /**
 * @summary Add detailed order
 */
export const usePostApiOrderAdd = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiOrderAdd>>, TError,{data: PostApiOrderAddBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiOrderAdd>>,
        TError,
        {data: PostApiOrderAddBody},
        TContext
      > => {

      const mutationOptions = getPostApiOrderAddMutationOptions(options);

      return useMutation(mutationOptions );
    }
    