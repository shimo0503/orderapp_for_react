/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * instant order backend API
 * this is API design
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiProduct200,
  PostApiProduct200,
  PostApiProductBody,
  PostApiRestBody,
  RegisterSchema
} from '.././model';

import { customInstance } from '../../../mutator/custom-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



export const getApiProduct = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetApiProduct200>(
      {url: `/api/product`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiProductQueryKey = () => {
    return [`/api/product`] as const;
    }

    
export const getGetApiProductQueryOptions = <TData = Awaited<ReturnType<typeof getApiProduct>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProduct>>> = ({ signal }) => getApiProduct(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiProductQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProduct>>>
export type GetApiProductQueryError = unknown


export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProduct>>,
          TError,
          Awaited<ReturnType<typeof getApiProduct>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiProduct>>,
          TError,
          Awaited<ReturnType<typeof getApiProduct>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiProductQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get products with condition (e.g. provided)
 */
export const postApiProduct = (
    postApiProductBody: PostApiProductBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiProductBody.provided !== undefined) {
 formData.append('provided', postApiProductBody.provided.toString())
 }

      return customInstance<PostApiProduct200>(
      {url: `/api/product`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getPostApiProductMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: PostApiProductBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: PostApiProductBody}, TContext> => {
    
const mutationKey = ['postApiProduct'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProduct>>, {data: PostApiProductBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiProduct(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProduct>>>
    export type PostApiProductMutationBody = PostApiProductBody
    export type PostApiProductMutationError = unknown

    /**
 * @summary Get products with condition (e.g. provided)
 */
export const usePostApiProduct = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: PostApiProductBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiProduct>>,
        TError,
        {data: PostApiProductBody},
        TContext
      > => {

      const mutationOptions = getPostApiProductMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Register or update product stock
 */
export const postApiRest = (
    postApiRestBody: PostApiRestBody,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      const formData = new FormData();
formData.append('name', postApiRestBody.name)
formData.append('rest', postApiRestBody.rest.toString())

      return customInstance<RegisterSchema>(
      {url: `/api/rest`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      options);
    }
  


export const getPostApiRestMutationOptions = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRest>>, TError,{data: PostApiRestBody}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRest>>, TError,{data: PostApiRestBody}, TContext> => {
    
const mutationKey = ['postApiRest'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRest>>, {data: PostApiRestBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiRest(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRestMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRest>>>
    export type PostApiRestMutationBody = PostApiRestBody
    export type PostApiRestMutationError = RegisterSchema

    /**
 * @summary Register or update product stock
 */
export const usePostApiRest = <TError = RegisterSchema,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRest>>, TError,{data: PostApiRestBody}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRest>>,
        TError,
        {data: PostApiRestBody},
        TContext
      > => {

      const mutationOptions = getPostApiRestMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    