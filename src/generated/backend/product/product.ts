/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * instant order backend API
 * this is API design
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import type {
  GetApiProduct200,
  PostApiProductBody,
  PostApiRestBody
} from '.././model';





export const getApiProduct = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetApiProduct200>> => {
    
    
    return axios.get(
      `/api/product`,options
    );
  }


export const getGetApiProductQueryKey = () => {
    return [`/api/product`] as const;
    }

    
export const getGetApiProductQueryOptions = <TData = Awaited<ReturnType<typeof getApiProduct>>, TError = AxiosError<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiProductQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiProduct>>> = ({ signal }) => getApiProduct({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiProductQueryResult = NonNullable<Awaited<ReturnType<typeof getApiProduct>>>
export type GetApiProductQueryError = AxiosError<unknown>



export function useGetApiProduct<TData = Awaited<ReturnType<typeof getApiProduct>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiProduct>>, TError, TData>, axios?: AxiosRequestConfig}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiProductQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get products with condition (e.g. provided)
 */
export const postApiProduct = (
    postApiProductBody: PostApiProductBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
if(postApiProductBody.provided !== undefined) {
 formData.append('provided', postApiProductBody.provided)
 }

    return axios.post(
      `/api/product`,
      formData,options
    );
  }



export const getPostApiProductMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: PostApiProductBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: PostApiProductBody}, TContext> => {
    
const mutationKey = ['postApiProduct'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiProduct>>, {data: PostApiProductBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiProduct(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiProductMutationResult = NonNullable<Awaited<ReturnType<typeof postApiProduct>>>
    export type PostApiProductMutationBody = PostApiProductBody
    export type PostApiProductMutationError = AxiosError<unknown>

    /**
 * @summary Get products with condition (e.g. provided)
 */
export const usePostApiProduct = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiProduct>>, TError,{data: PostApiProductBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiProduct>>,
        TError,
        {data: PostApiProductBody},
        TContext
      > => {

      const mutationOptions = getPostApiProductMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Register or update product stock
 */
export const postApiRest = (
    postApiRestBody: PostApiRestBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    const formData = new FormData();
formData.append('name', postApiRestBody.name)
formData.append('rest', postApiRestBody.rest.toString())

    return axios.post(
      `/api/rest`,
      formData,options
    );
  }



export const getPostApiRestMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRest>>, TError,{data: PostApiRestBody}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postApiRest>>, TError,{data: PostApiRestBody}, TContext> => {
    
const mutationKey = ['postApiRest'];
const {mutation: mutationOptions, axios: axiosOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, axios: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRest>>, {data: PostApiRestBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiRest(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRestMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRest>>>
    export type PostApiRestMutationBody = PostApiRestBody
    export type PostApiRestMutationError = AxiosError<unknown>

    /**
 * @summary Register or update product stock
 */
export const usePostApiRest = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRest>>, TError,{data: PostApiRestBody}, TContext>, axios?: AxiosRequestConfig}
 ): UseMutationResult<
        Awaited<ReturnType<typeof postApiRest>>,
        TError,
        {data: PostApiRestBody},
        TContext
      > => {

      const mutationOptions = getPostApiRestMutationOptions(options);

      return useMutation(mutationOptions );
    }
    